---
---
<canvas id="particleCanvas" class="fixed inset-0 pointer-events-none"></canvas>

<script>
  class Particle {
    constructor(x, y) {
      this.x = x;
      this.y = y;
      this.baseX = x;
      this.baseY = y;
      this.size = 1.5;
      this.density = Math.random() * 15 + 1;
      this.distance = 100;
      this.brightness = 0.8;
      this.alpha = Math.random() * 0.3 + 0.2;
    }

    draw(ctx) {
      ctx.fillStyle = `rgba(255, 255, 255, ${this.alpha * this.brightness})`;
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
      ctx.closePath();
      ctx.fill();
    }

    update(mouse) {
      const dx = mouse.x - this.x;
      const dy = mouse.y - this.y;
      const distance = Math.sqrt(dx * dx + dy * dy);
      const maxDistance = mouse.radius;
      
      if (distance < maxDistance) {
        const force = (maxDistance - distance) / maxDistance;
        const directionX = dx / distance;
        const directionY = dy / distance;
        
        this.x -= directionX * force * 0.8;
        this.y -= directionY * force * 0.8;
        
        this.brightness = 1 + force * 0.5;
      } else {
        this.brightness = 0.8;
      }

      const returnX = (this.baseX - this.x) * 0.05;
      const returnY = (this.baseY - this.y) * 0.05;
      
      this.x += returnX;
      this.y += returnY;
    }
  }

  class Sparkle {
    constructor(x, y) {
      this.x = x;
      this.y = y;
      this.size = Math.random() * 2 + 1;
      this.angle = Math.random() * Math.PI * 2;
      this.radius = Math.random() * 50 + 50;
      this.speed = Math.random() * 0.02 + 0.01;
      this.centerX = window.innerWidth / 2;
      this.centerY = window.innerHeight / 2;
      this.brightness = Math.random() * 0.5 + 0.5;
      this.alpha = Math.random() * 0.5 + 0.3;
      this.twinkleSpeed = Math.random() * 0.05 + 0.01;
      this.twinklePhase = Math.random() * Math.PI * 2;
    }

    draw(ctx) {
      this.twinklePhase += this.twinkleSpeed;
      const twinkle = (Math.sin(this.twinklePhase) + 1) * 0.5;
      const alpha = this.alpha * (0.5 + twinkle * 0.5);

      ctx.save();
      ctx.translate(this.x, this.y);
      
      // Star shape
      ctx.beginPath();
      ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;
      for (let i = 0; i < 4; i++) {
        ctx.rotate(Math.PI / 2);
        ctx.lineTo(this.size * 2, 0);
        ctx.lineTo(this.size * 0.5, this.size * 0.5);
      }
      ctx.closePath();
      ctx.fill();

      // Glow effect
      const gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, this.size * 2);
      gradient.addColorStop(0, `rgba(255, 255, 255, ${alpha * 0.5})`);
      gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
      ctx.fillStyle = gradient;
      ctx.beginPath();
      ctx.arc(0, 0, this.size * 2, 0, Math.PI * 2);
      ctx.fill();

      ctx.restore();
    }

    update() {
      // Always spin in a circle, regardless of mouse movement
      this.angle += this.speed;
      this.x = this.centerX + Math.cos(this.angle) * this.radius;
      this.y = this.centerY + Math.sin(this.angle) * this.radius;
    }
  }

  class ParticleField {
    constructor() {
      this.canvas = document.getElementById('particleCanvas');
      this.ctx = this.canvas.getContext('2d');
      this.particles = [];
      this.sparkles = [];
      this.mouse = {
        x: undefined,
        y: undefined,
        radius: 100
      };

      this.resize();
      this.init();
      this.addEventListeners();
      this.animate();
    }

    resize() {
      const dpr = window.devicePixelRatio || 1;
      this.canvas.width = window.innerWidth * dpr;
      this.canvas.height = window.innerHeight * dpr;
      this.canvas.style.width = `${window.innerWidth}px`;
      this.canvas.style.height = `${window.innerHeight}px`;
      this.ctx.scale(dpr, dpr);
    }

    init() {
      // Initialize background particles
      const density = 45;
      const numParticlesX = Math.floor(window.innerWidth / density);
      const numParticlesY = Math.floor(window.innerHeight / density);

      for (let y = 0; y < numParticlesY; y++) {
        for (let x = 0; x < numParticlesX; x++) {
          const particleX = x * density + (Math.random() - 0.5) * density;
          const particleY = y * density + (Math.random() - 0.5) * density;
          this.particles.push(new Particle(particleX, particleY));
        }
      }

      // Initialize sparkles
      const numSparkles = Math.floor((window.innerWidth * window.innerHeight) / 15000);
      for (let i = 0; i < numSparkles; i++) {
        const x = Math.random() * window.innerWidth;
        const y = Math.random() * window.innerHeight;
        this.sparkles.push(new Sparkle(x, y));
      }
    }

    addEventListeners() {
      window.addEventListener('resize', () => {
        this.resize();
        this.particles = [];
        this.sparkles = [];
        this.init();
      });
      
      this.canvas.addEventListener('mousemove', (e) => {
        const rect = this.canvas.getBoundingClientRect();
        const dpr = window.devicePixelRatio || 1;
        this.mouse.x = (e.clientX - rect.left) * dpr;
        this.mouse.y = (e.clientY - rect.top) * dpr;
      });

      this.canvas.addEventListener('mouseleave', () => {
        this.mouse.x = undefined;
        this.mouse.y = undefined;
      });
    }

    animate() {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

      // Draw and update background particles
      for (const particle of this.particles) {
        particle.update(this.mouse);
        particle.draw(this.ctx);
      }

      // Draw and update sparkles
      for (const sparkle of this.sparkles) {
        sparkle.update(); // No mouse parameter needed anymore
        sparkle.draw(this.ctx);
      }

      requestAnimationFrame(() => this.animate());
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ParticleField();
  });
</script>

<style>
  canvas {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 0;
    background: transparent;
    pointer-events: auto;
  }
</style>